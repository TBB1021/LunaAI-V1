import requests
import json
import os
from LunaController import LunaSpeechRecognition
from LunaAI import LunaAi
#creates the github plugin
class Plugin():
    def __init__(self):
        self.commands = {"create a repository": self.Create_Repo,"remove a repository":self.Delete_Repo}
        self.pat=os.getenv("githubtoken")
        self.giturl="https://api.github.com/"
        self.ai=LunaSpeechRecognition.return_stt(self)
        self.mic=LunaSpeechRecognition.return_mic(self)
        self.luna=LunaAi()

    #checks to see if any commands are a match
    def Command_Words_Check(self, chosen_command):
        return chosen_command in self.commands

    #executes the given command
    def Execute(self, command, prompt=None):
        if command in self.commands:
            return self.commands[command](prompt)
    #if the user wants to create a repo
    #plugin will ask for the name of the repo
    #a description is autogenerated by the LunaAI
    #POST request is sent
    def Create_Repo(self,prompt):
        self.luna.TextToSpeech("What would you like the repository to be called")
        with self.mic as source:
            self.ai.adjust_for_ambient_noise(source)
            spoken_name = self.ai.listen(source,timeout=10,phrase_time_limit=15)
            name= self.ai.recognize_google(spoken_name)
        crurl = self.giturl+"user/repos"
        self.luna.sendMessage("write me a brief description for a github repo called "+name)
        des=self.luna.RetrieveResponse()
        header = {"Authorization": f"token {self.pat}"}
        rbody = {"name": name, "description": des, "private": True}
        response = requests.post(crurl, data=json.dumps(rbody), headers=header)
        self.luna.TextToSpeech(des)
        print("done")
    #if the user wants to delete a repo
    #plugin will ask for the name of the repo
    #repo is delted via GET request
    def Delete_Repo(self,prompt):
        self.luna.TextToSpeech("What repository would you like to delete")
        with self.mic as source:
            self.ai.adjust_for_ambient_noise(source)
            spoken_name = self.ai.listen(source,timeout=10,phrase_time_limit=15)
            name= self.ai.recognize_google(spoken_name)
        crurl=self.giturl+f"/{os.getenv('gituser')}/{name}"
        header = {"Authorization": f"token {self.pat}"}
        response = requests.delete(crurl,headers=header)
        if response.status_code ==204:
            self.luna.TextToSpeech("Repositiory deleted")
        else:
            self.luna.TextToSpeech("failed")
        
